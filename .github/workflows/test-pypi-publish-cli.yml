name: Publish CLI to TestPyPI on Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  wait-for-library:
    runs-on: ubuntu-latest
    steps:
    - name: Wait for library to be published
      run: |
        echo "Waiting for library to be available on TestPyPI..."
        # Wait a bit to ensure library is published first
        sleep 30

  build-and-publish-cli:
    runs-on: ubuntu-latest
    needs: wait-for-library
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Install toml package for version handling
      run: |
        python -m pip install toml
    
    - name: Get library version from TestPyPI
      run: |
        # Get the library version that was just published
        LIBRARY_VERSION=$(python -c "import toml; print(toml.load('lib/pyproject.toml')['project']['version'])")
        echo "LIBRARY_VERSION=${LIBRARY_VERSION}" >> $GITHUB_ENV
    
    - name: Auto-increment CLI version for TestPyPI
      run: |
        # Get current version from app/cli/pyproject.toml
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('app/cli/pyproject.toml')['project']['version'])")
        
        # Create a dev version with timestamp for TestPyPI (e.g., 0.1.0.dev20240814151754)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        DEV_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}"
        
        # Update version in app/cli/pyproject.toml for this build
        python -c "
import toml
config = toml.load('app/cli/pyproject.toml')
config['project']['version'] = '${DEV_VERSION}'
# Update the library dependency to use the specific version
for i, dep in enumerate(config['project']['dependencies']):
    if dep.startswith('pdst-calc-lib'):
        config['project']['dependencies'][i] = 'pdst-calc-lib==${LIBRARY_VERSION}'
        break
with open('app/cli/pyproject.toml', 'w') as f:
    toml.dump(config, f)
"
        
        echo "Updated CLI version to: ${DEV_VERSION}"
        echo "Updated library dependency to: pdst-calc-lib==${LIBRARY_VERSION}"
        echo "DEV_VERSION=${DEV_VERSION}" >> $GITHUB_ENV
    
    - name: Build CLI package
      run: |
        cd app/cli
        python -m build
    
    - name: Check CLI package
      run: |
        python -m twine check app/cli/dist/*
    
    - name: Publish CLI to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GENPATH_TEST_PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing CLI to TestPyPI (GENPATH-bioinformatics organization)..."
        python -m twine upload --repository testpypi app/cli/dist/* --verbose
    
    - name: Create summary
      run: |
        echo "## 🖥️ CLI Published to TestPyPI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ env.DEV_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** pdst-calc-cli" >> $GITHUB_STEP_SUMMARY
        echo "**TestPyPI URL:** https://test.pypi.org/project/pdst-calc-cli/${{ env.DEV_VERSION }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Install Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pdst-calc-cli==${{ env.DEV_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Dependencies:** pdst-calc-lib==${{ env.LIBRARY_VERSION }}" >> $GITHUB_STEP_SUMMARY
