name: Publish Library to TestPyPI on Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install library and test dependencies
      run: |
        python -m pip install --upgrade pip
        cd lib
        python -m pip install -e .[test]

    - name: Run tests
      run: |
        cd lib
        python -m pytest tests/ -v --tb=short

    - name: Run tests with coverage
      run: |
        cd lib
        python -m pytest tests/ --cov=. --cov-report=term-missing

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Install toml package for version handling
      run: |
        python -m pip install toml

    - name: Auto-increment library version for TestPyPI
      run: |
        # Get current version from lib/pyproject.toml
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('lib/pyproject.toml')['project']['version'])")

        # Create a dev version with timestamp for TestPyPI (e.g., 0.1.0.dev20240814151754)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        DEV_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}"

        # Update version in lib/pyproject.toml for this build
        python -c "
        import toml
        config = toml.load('lib/pyproject.toml')
        config['project']['version'] = '${DEV_VERSION}'
        with open('lib/pyproject.toml', 'w') as f:
            toml.dump(config, f)
        "

        echo "Updated library version to: ${DEV_VERSION}"
        echo "DEV_VERSION=${DEV_VERSION}" >> $GITHUB_ENV

    - name: Build library package
      run: |
        cd lib
        python -m build

    - name: Check library package
      run: |
        python -m twine check lib/dist/*

    - name: Publish library to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GENPATH_TEST_PYPI_API_TOKEN }}
      run: |
        echo "ðŸš€ Publishing library to TestPyPI (GENPATH-bioinformatics organization)..."
        python -m twine upload --repository testpypi lib/dist/* --verbose

    - name: Create summary
      run: |
        echo "## ðŸ“¦ Library Published to TestPyPI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ env.DEV_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** pdst-calc-lib" >> $GITHUB_STEP_SUMMARY
        echo "**TestPyPI URL:** https://test.pypi.org/project/pdst-calc-lib/${{ env.DEV_VERSION }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Install Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pdst-calc-lib==${{ env.DEV_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
