name: Auto-publish to TestPyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v0.1.0)
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

env:
  PACKAGE_NAME: pdst-calc

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine tomli-w
    
    - name: Extract and set version
      id: version
      run: |
        # Extract current version from pyproject.toml
        CURRENT_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        
        # Check if this is a tag-triggered build
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          # For tag builds, use tag as version (remove 'v' prefix if present)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          TAG_VERSION=${TAG_NAME#v}  # Remove 'v' prefix if present
          PUBLISH_VERSION="${TAG_VERSION}"
          
          echo "🏷️  Tag detected: ${TAG_NAME}"
          echo "📦 Publishing tag version: ${PUBLISH_VERSION}"
          
          # Update version in pyproject.toml to match tag
          sed -i.bak "s/version = \"${CURRENT_VERSION}\"/version = \"${PUBLISH_VERSION}\"/" pyproject.toml
        else
          # For manual triggers, create a dev version
          COMMIT_SHA=${GITHUB_SHA:0:7}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          PUBLISH_VERSION="${CURRENT_VERSION}.dev${TIMESTAMP}+${COMMIT_SHA}"
          
          echo "🔧 Manual trigger detected"
          echo "📦 Publishing dev version: ${PUBLISH_VERSION}"
          
          # Update version in pyproject.toml
          sed -i.bak "s/version = \"${CURRENT_VERSION}\"/version = \"${PUBLISH_VERSION}\"/" pyproject.toml
        fi
        
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "publish_version=${PUBLISH_VERSION}" >> $GITHUB_OUTPUT
        
        # Verify the change
        echo "✅ Updated pyproject.toml version:"
        grep 'version =' pyproject.toml
    
    - name: Run basic tests (if available)
      continue-on-error: true
      run: |
        # Install the package in development mode
        pip install -e .
        
        # Try to import the package to verify it works
        python -c "
try:
    import lib.dst_calc
    import lib.drug_database  
    import lib.supp_calc
    print('✅ All core modules import successfully')
except ImportError as e:
    print(f'⚠️  Import warning: {e}')
    exit(1)
"
    
    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        
        echo "📋 Built files:"
        ls -la dist/
    
    - name: Verify package
      run: |
        echo "🔍 Checking package integrity..."
        python -m twine check dist/*
        
        echo "📝 Package metadata:"
        python -m build --sdist --outdir temp_dist/
        tar -tf temp_dist/*.tar.gz | head -20
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GENPATH_TEST_PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to TestPyPI (GENPATH-bioinformatics organization)..."
        python -m twine upload --repository testpypi dist/* --verbose
    
    - name: Test installation from TestPyPI
      run: |
        echo "🧪 Testing installation from TestPyPI..."
        
        # Wait a moment for the package to be available
        sleep 30
        
        # Try to install and test the package
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ env.PACKAGE_NAME }}==${{ steps.version.outputs.publish_version }}
        
        # Test the CLI
        pdst-calc --help > /tmp/cli_output.txt
        if grep -q "DST Calculator CLI" /tmp/cli_output.txt; then
          echo "✅ CLI is working correctly"
        else
          echo "❌ CLI test failed"
          exit 1
        fi
    
    - name: Create job summary
      if: always()
      run: |
        echo "## 📦 TestPyPI Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Status:** Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Original Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Published Version:** ${{ steps.version.outputs.publish_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- **TestPyPI Project:** https://test.pypi.org/project/${{ env.PACKAGE_NAME }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Specific Version:** https://test.pypi.org/project/${{ env.PACKAGE_NAME }}/${{ steps.version.outputs.publish_version }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📥 Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ env.PACKAGE_NAME }}==${{ steps.version.outputs.publish_version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
